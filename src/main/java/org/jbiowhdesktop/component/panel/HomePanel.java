package org.jbiowhdesktop.component.panel;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.UUID;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import org.eclipse.persistence.exceptions.DatabaseException;
import org.jbiowhdbms.dbms.JBioWHDBMS;
import org.jbiowhdbms.dbms.WHDBMSFactory;
import org.jbiowhdesktop.actions.tabbedpanel.TabbedPanelCloseActionListener;
import org.jbiowhdesktop.component.panel.sql.SQLBrowsePanel;
import org.jbiowhdesktop.component.panel.tabbedpanel.ClosePanel;
import org.jbiowhdesktop.component.table.model.ListTableModel;
import org.jbiowhpersistence.datasets.DataSetPersistence;
import org.jbiowhpersistence.datasets.disease.omim.OMIMTables;
import org.jbiowhpersistence.datasets.domain.pfam.PFamTables;
import org.jbiowhpersistence.datasets.drug.drugbank.DrugBankTables;
import org.jbiowhpersistence.datasets.gene.gene.GeneTables;
import org.jbiowhpersistence.datasets.gene.genebank.GeneBankTables;
import org.jbiowhpersistence.datasets.gene.genome.GenePTTTables;
import org.jbiowhpersistence.datasets.ontology.OntologyTables;
import org.jbiowhpersistence.datasets.pathway.kegg.KEGGTables;
import org.jbiowhpersistence.datasets.ppi.MIF25Tables;
import org.jbiowhpersistence.datasets.protclust.UniRefTables;
import org.jbiowhpersistence.datasets.protein.ProteinTables;
import org.jbiowhpersistence.datasets.taxonomy.TaxonomyTables;
import org.jbiowhpersistence.utils.entitymanager.JBioWHPersistence;

/**
 * This JPanel is the Home interface
 *
 * $Author: r78v10a07@gmail.com $ $LastChangedDate: 2012-09-25 00:06:19 +0200
 * (Tue, 25 Sep 2012) $ $LastChangedRevision: 591 $
 *
 * @since Feb 10, 2012
 */
public class HomePanel extends javax.swing.JPanel {

    /**
     * Creates new form HomePanel
     *
     * @param parentComponent the parent JComponent (Should be a JTabbedPane)
     * @param whdbmsFactory the WDBMS factory
     */
    public HomePanel(JComponent parentComponent, WHDBMSFactory whdbmsFactory) {
        this.parentComponent = parentComponent;
        uniqueKey = UUID.randomUUID();
        if (whdbmsFactory != null) {
            this.whdbmsFactory = whdbmsFactory;
        }
        initComponents();
    }

    public void setVisible() {
        if (parentComponent instanceof JTabbedPane) {
            try {
                JTabbedPane jTabbedPane2 = (JTabbedPane) parentComponent;
                ListTableModel model = (ListTableModel) getjTDataSets().getModel();
                if (whdbmsFactory == null) {
                    whdbmsFactory = JBioWHDBMS.getInstance().getWhdbmsFactory();
                }
                model.setContents(DataSetPersistence.getInstance().loadDataSet(JBioWHPersistence.getInstance().getWHEntityManager(whdbmsFactory.getUrl())));
                jTabbedPane2.addTab("Home: " + whdbmsFactory.getMainURLParsed(), this);
                jTabbedPane2.setTabComponentAt(jTabbedPane2.getTabCount() - 1,
                        new ClosePanel(jTabbedPane2, "Home: " + whdbmsFactory.getMainURLParsed(),
                                getUniqueKey(), new TabbedPanelCloseActionListener(jTabbedPane2)));
                jTabbedPane2.setSelectedIndex(jTabbedPane2.getTabCount() - 1);
            } catch (DatabaseException ex) {
                int type = JOptionPane.ERROR_MESSAGE;
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", type);
            }
        }

    }

    /**
     * Return the unique Id for this object
     *
     * @return the unique Id for this object
     */
    public UUID getUniqueKey() {
        return uniqueKey;
    }

    /**
     * Get the Dataset Table
     *
     * @return
     */
    public JTable getjTDataSets() {
        return jTDataSets;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTDataSets =         new javax.swing.JTable() {
            @Override
            public String getToolTipText(java.awt.event.MouseEvent e) {
                String tip = null;
                java.awt.Point p = e.getPoint();
                int rowIndex = rowAtPoint(p);
                int colIndex = columnAtPoint(p);
                int realColumnIndex = convertColumnIndexToModel(colIndex);

                if (realColumnIndex >= 0) {
                    TableModel model = getModel();

                    Object tipTemp = model.getValueAt(rowIndex, colIndex);
                    if (tipTemp != null) {
                        if (tipTemp instanceof String) {
                            tip = (String) tipTemp;
                        } else {
                            tip = tipTemp.toString();
                        }
                    }

                } else {
                    tip = super.getToolTipText(e);
                }
                return tip;
            }
        };
        jScrollPane3 = new javax.swing.JScrollPane();
        jTables =         new javax.swing.JTable() {
            @Override
            public String getToolTipText(java.awt.event.MouseEvent e) {
                String tip = null;
                java.awt.Point p = e.getPoint();
                int rowIndex = rowAtPoint(p);
                int colIndex = columnAtPoint(p);
                int realColumnIndex = convertColumnIndexToModel(colIndex);

                if (realColumnIndex >= 0) {
                    TableModel model = getModel();

                    Object tipTemp = model.getValueAt(rowIndex, colIndex);
                    if (tipTemp != null) {
                        if (tipTemp instanceof String) {
                            tip = (String) tipTemp;
                        } else {
                            tip = tipTemp.toString();
                        }
                    }

                } else {
                    tip = super.getToolTipText(e);
                }
                return tip;
            }
        };

        jTDataSets.setModel(new ListTableModel(new String[]
            {"Name", "Release date", "Load date", "Change date", "URL", "Application", "Status"}
            , DataSetPersistence.getInstance().loadDataSet(),
            new Class[]{java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class},
            new boolean[]{false, false, false, false, false, false, false}));
    jTDataSets.setFillsViewportHeight(true);
    jTDataSets.setGridColor(new java.awt.Color(240, 240, 240));
    jTDataSets.setMaximumSize(new java.awt.Dimension(32767, 32767));
    jTDataSets.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTDataSetsMouseClicked(evt);
        }
    });
    jScrollPane2.setViewportView(jTDataSets);

    jTables.setModel(new ListTableModel(new String[]
        {"Table", "Rows"}
        , new ArrayList(),
        new Class[]{java.lang.Object.class, java.lang.Object.class},
        new boolean[]{false, false}));
jTables.setFillsViewportHeight(true);
jTables.setGridColor(new java.awt.Color(240, 240, 240));
jTables.setMaximumSize(new java.awt.Dimension(32767, 32767));
jTables.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseClicked(java.awt.event.MouseEvent evt) {
        jTablesMouseClicked(evt);
    }
    });
    jScrollPane3.setViewportView(jTables);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE)
        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void jTDataSetsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTDataSetsMouseClicked
        if (jTDataSets.getSelectedRow() >= 0
                && jTDataSets.getSelectedRow() < jTDataSets.getRowCount()) {
            ListTableModel model = (ListTableModel) jTables.getModel();
            switch ((String) jTDataSets.getValueAt(jTDataSets.getSelectedRow(), 5)) {
                case "TaxonomyLoader":
                    model.setContents(whdbmsFactory.countTablesRow(TaxonomyTables.getInstance().getTables()));
                    break;
                case "OntologyLoader":
                    model.setContents(whdbmsFactory.countTablesRow(OntologyTables.getInstance().getTables()));
                    break;
                case "GeneLoader":
                    model.setContents(whdbmsFactory.countTablesRow(GeneTables.getInstance().getTables()));
                    break;
                case "GenePTTLoader":
                    model.setContents(whdbmsFactory.countTablesRow(GenePTTTables.getInstance().getTables()));
                    break;
                case "ProteinLoader":
                    model.setContents(whdbmsFactory.countTablesRow(ProteinTables.getInstance().getTables()));
                    break;
                case "MIF25Loader":
                    model.setContents(whdbmsFactory.countTablesRow(MIF25Tables.getInstance().getTables()));
                    break;
                case "ProtFamLoader":
                    model.setContents(whdbmsFactory.countTablesRow(UniRefTables.getInstance().getTables()));
                    break;
                case "DrugLoader":
                    model.setContents(whdbmsFactory.countTablesRow(DrugBankTables.getInstance().getTables()));
                    break;
                case "PathwayLoader":
                    model.setContents(whdbmsFactory.countTablesRow(KEGGTables.getInstance().getTables()));
                    break;
                case "OMIMLoader":
                    model.setContents(whdbmsFactory.countTablesRow(OMIMTables.getInstance().getTables()));
                    break;
                case "PFAMLoader":
                    model.setContents(whdbmsFactory.countTablesRow(PFamTables.getInstance().getTables()));
                    break;
                case "GeneBankLoader":
                    model.setContents(whdbmsFactory.countTablesRow(GeneBankTables.getInstance().getTables()));
                    break;
            }

        }
    }//GEN-LAST:event_jTDataSetsMouseClicked

    private void jTablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablesMouseClicked
        if (jTables.getSelectedRow() >= 0
                && jTables.getSelectedRow() < jTables.getRowCount()) {
            try {
                SQLBrowsePanel browsePanel = new SQLBrowsePanel(
                        (String) jTables.getValueAt(jTables.getSelectedRow(), 0),
                        whdbmsFactory.executeSingleSQLSelect("select * from "
                                + (String) jTables.getValueAt(jTables.getSelectedRow(), 0), 0, 1000), parentComponent);
                browsePanel.setVisible();
            } catch (SQLException ex) {
                int type = JOptionPane.ERROR_MESSAGE;
                JOptionPane.showMessageDialog(parentComponent, ex.getMessage(), "SQL Error", type);
            }
        }
    }//GEN-LAST:event_jTablesMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTDataSets;
    private javax.swing.JTable jTables;
    // End of variables declaration//GEN-END:variables
    private WHDBMSFactory whdbmsFactory;
    private JComponent parentComponent;
    private UUID uniqueKey;
}

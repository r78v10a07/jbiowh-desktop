package org.jbiowhdesktop.component.panel.sql;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.swing.JComponent;
import javax.swing.JTabbedPane;
import javax.swing.table.TableModel;
import org.jbiowhdesktop.actions.tabbedpanel.TabbedPanelCloseActionListener;
import org.jbiowhdesktop.component.panel.tabbedpanel.ClosePanel;
import org.jbiowhdesktop.component.table.model.ListTableModel;

/**
 * This JPanel is
 *
 * $Author: r78v10a07@gmail.com $ 
 * $LastChangedDate: 2012-10-08 15:29:16 +0200 (Mon, 08 Oct 2012) $ 
 * $LastChangedRevision: 273 $
 * @since Feb 11, 2012
 */
public class SQLBrowsePanel extends javax.swing.JPanel {

    /**
     * Creates new form SQLBrowsePanel
     *
     * @param tabName
     * @param sqlResult a list with the SQL result. The first element is the
     * column name
     * @param parentComponent the parent JComponent
     */
    public SQLBrowsePanel(String tabName, List sqlResult, JComponent parentComponent) {
        this.sqlResult = sqlResult;
        this.parentComponent = parentComponent;
        this.tabName = tabName;
        uniqueKey = UUID.randomUUID();
        initComponents();
    }

    /**
     * Return the unique Id for this object
     *
     * @return the unique Id for this object
     */
    public UUID getUniqueKey() {
        return uniqueKey;
    }

    /**
     * Shows the SQLBrowsePanel
     */
    public void setVisible() {
        if (parentComponent instanceof JTabbedPane) {
            ((JTabbedPane) parentComponent).addTab(tabName, this);
            ((JTabbedPane) parentComponent).setTabComponentAt(((JTabbedPane) parentComponent).getTabCount() - 1,
                    new ClosePanel((JTabbedPane) parentComponent,
                    tabName, uniqueKey, new TabbedPanelCloseActionListener(parentComponent)));
            ((JTabbedPane) parentComponent).setSelectedIndex(((JTabbedPane) parentComponent).getTabCount() - 1);
        }
    }

    private void createTableContents() {
        header = new String[((List) sqlResult.get(0)).size()];
        for (int i = 0; i < ((List) sqlResult.get(0)).size(); i++) {
            header[i] = (String) ((List) sqlResult.get(0)).get(i);
        }
        data = sqlResult.subList(1, sqlResult.size());
    }

    private void createClass() {
        int length = header.length;
        tClass = new Class[length];
        for (int i = 0; i < length; i++) {
            tClass[i] = java.lang.Object.class;
        }
    }

    private void createCanEdit() {
        int length = header.length;
        canEdit = new boolean[length];
        for (int i = 0; i < length; i++) {
            canEdit[i] = false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLFilter = new javax.swing.JLabel();
        jTFilter = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable =         new javax.swing.JTable() {

            @Override
            public String getToolTipText(java.awt.event.MouseEvent e) {
                String tip = null;
                java.awt.Point p = e.getPoint();
                int rowIndex = rowAtPoint(p);
                int colIndex = columnAtPoint(p);
                int realColumnIndex = convertColumnIndexToModel(colIndex);

                if (realColumnIndex != 0) {
                    TableModel model = getModel();

                    Object tipTemp = model.getValueAt(rowIndex, colIndex);
                    if (tipTemp != null) {
                        if (tipTemp instanceof String) {
                            tip = (String) tipTemp;
                        } else {
                            tip = tipTemp.toString();
                        }
                    }

                } else {
                    tip = super.getToolTipText(e);
                }
                return tip;
            }
        };
        jLFound = new javax.swing.JLabel();

        jLFilter.setText("Filter:");
        jLFilter.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jTFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFilterKeyReleased(evt);
            }
        });

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        createTableContents();
        createClass();
        createCanEdit();
        jTable.setModel(new ListTableModel(header,data, tClass, canEdit));
        jTable.setColumnSelectionAllowed(true);
        jTable.setFillsViewportHeight(true);
        jTable.setGridColor(new java.awt.Color(240, 240, 240));
        jScrollPane1.setViewportView(jTable);
        jTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLFound.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLFound.setText("Found " + data.size() + " elements");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFilter))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLFound, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLFound)
                .addGap(5, 5, 5))
        );
    }// </editor-fold>//GEN-END:initComponents

    private boolean collectionFieldContains(String s, List<Object> data) {
        for (Object d : data) {
            if (d instanceof String) {
                if (((String) d).toUpperCase().contains(s.toUpperCase())) {
                    return true;
                }
            } else if (d instanceof Long) {
                if (((Long) d).toString().toUpperCase().contains(s.toUpperCase())) {
                    return true;
                }
            }
        }
        return false;
    }

    private void searchFilter() {
        ListTableModel model = (ListTableModel) jTable.getModel();
        ArrayList<List<Object>> objects = new ArrayList<>();
        for (Object d : data) {
            if (collectionFieldContains(jTFilter.getText(), (List<Object>) d)) {
                objects.add((List<Object>) d);
            }
        }
        model.setContents(objects);
        jLFound.setText("Found " + objects.size() + " elements");
    }

    private void jTFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFilterKeyReleased
        searchFilter();
    }//GEN-LAST:event_jTFilterKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLFilter;
    private javax.swing.JLabel jLFound;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFilter;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables
    private List sqlResult;
    private List data;
    private String[] header;
    private Class[] tClass;
    private boolean[] canEdit;
    private JComponent parentComponent;
    private UUID uniqueKey;
    private String tabName;
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jbiowhdesktop.component.dialog;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.bind.JAXBException;
import org.jbiowhdesktop.component.file.FileChooser;
import org.jbiowhdesktop.component.panel.result.ResultPanelFactory;
import org.jbiowhdesktop.component.table.model.ListTableModel;
import org.jbiowhdesktop.datasets.protein.ProteinListView;
import org.jbiowhdesktop.utils.SavedResults;
import org.jbiowhpersistence.datasets.protein.entities.Protein;
import org.jbiowhpersistence.utils.entitymanager.JBioWHPersistence;
import org.jbiowhpersistence.utils.msms.MSFactory;
import org.jbiowhpersistence.utils.msms.modules.MSBioMLParser;
import org.jbiowhpersistence.utils.msms.modules.MSPrideParser;

/**
 * This is the Load MS XML dialog
 *
 * @author roberto
 */
public class LoadMSXMLDialog extends javax.swing.JDialog {
    
    private java.awt.Frame parent;
    private File xmlFile;
    private MSFactory mSFactory;

    /**
     * Creates new form LoadMSXMLDialog
     */
    public LoadMSXMLDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBOpen = new javax.swing.JButton();
        jLFile = new javax.swing.JLabel();
        jCType = new javax.swing.JComboBox();
        jBProcess = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTResults = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTResultPanel = new javax.swing.JTabbedPane();
        jBSAll = new javax.swing.JButton();
        jBShowAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MS XML Loader");

        jBOpen.setText("Open");
        jBOpen.setToolTipText("Open XML file");
        jBOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBOpenActionPerformed(evt);
            }
        });

        jLFile.setBackground(new java.awt.Color(255, 255, 255));

        jCType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pride", "BioML", " " }));

        jBProcess.setText("Process");
        jBProcess.setEnabled(false);
        jBProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBProcessActionPerformed(evt);
            }
        });

        jTResults.setModel(new ListTableModel(new String[]
            {"Id", "No. Proteins"}
            , new ArrayList(),
            new Class[]{java.lang.Object.class, java.lang.Object.class},
            new boolean[]{false, false}));
    jTResults.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTResultsMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(jTResults);

    jButton1.setText("Close");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jBSAll.setText("Save All");
    jBSAll.setEnabled(false);
    jBSAll.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jBSAllActionPerformed(evt);
        }
    });

    jBShowAll.setText("Show All");
    jBShowAll.setEnabled(false);
    jBShowAll.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jBShowAllActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTResultPanel)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jCType, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBProcess))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jBOpen)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(jBShowAll)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jBSAll)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1)))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jBOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jBProcess))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTResultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1)
                .addComponent(jBSAll)
                .addComponent(jBShowAll))
            .addGap(6, 6, 6))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBOpenActionPerformed
        FileChooser fileChooser = new FileChooser(parent, true, new FileNameExtensionFilter("XML File (*.xml)", "xml"));
        fileChooser.getjFileChooser1().setMultiSelectionEnabled(false);
        fileChooser.getjFileChooser1().setDialogType(javax.swing.JFileChooser.OPEN_DIALOG);
        fileChooser.setVisible(true);
        if (!fileChooser.isCancelled() && fileChooser.getjFileChooser1().getSelectedFile() != null) {
            try {
                xmlFile = fileChooser.getjFileChooser1().getSelectedFile();
                jLFile.setText(xmlFile.getCanonicalPath());
                jBProcess.setEnabled(true);
                ListTableModel model = (ListTableModel) jTResults.getModel();
                model.setContents(new ArrayList());
            } catch (IOException ex) {
                int type = JOptionPane.ERROR_MESSAGE;
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", type);
            }
        }
    }//GEN-LAST:event_jBOpenActionPerformed
    
    private void jBProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBProcessActionPerformed
        try {
            switch (((String) jCType.getSelectedItem()).toUpperCase()) {
                case "PRIDE":
                    mSFactory = new MSPrideParser();
                    break;
                case "BIOML":
                    mSFactory = new MSBioMLParser();
                    break;
            }
            mSFactory.parseXML(xmlFile, JBioWHPersistence.getInstance().getWHEntityManager());
            
            ListTableModel model = (ListTableModel) jTResults.getModel();
            model.setContents(new ArrayList());
            for (Map.Entry<String, List<Protein>> map : mSFactory.getProteinList()) {
                List data = new ArrayList();
                data.add(map.getKey());
                data.add(map.getValue().size());
                model.addRow(data);
            }
            for (String s : mSFactory.getNotFound()) {
                List data = new ArrayList();
                data.add(s);
                data.add(0);
                model.addRow(data);
            }
            
            if (!mSFactory.getProteinList().isEmpty()) {
                jBSAll.setEnabled(true);
                jBShowAll.setEnabled(true);
            } else {
                jBSAll.setEnabled(false);
                jBShowAll.setEnabled(false);
            }
        } catch (IllegalAccessException | JAXBException ex) {
            int type = JOptionPane.ERROR_MESSAGE;
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", type);
        }
    }//GEN-LAST:event_jBProcessActionPerformed
    
    private void jTResultsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTResultsMouseClicked
        if (jTResults.getSelectedRow() >= 0
                && jTResults.getSelectedRow() < jTResults.getRowCount()) {
            System.out.println((String) jTResults.getValueAt(jTResults.getSelectedRow(), 0));
            if (!((Integer) jTResults.getValueAt(jTResults.getSelectedRow(), 1)).equals(0)) {
                ProteinListView pView = new ProteinListView(mSFactory.getProteinList().get(jTResults.getSelectedRow()).getValue(), jTResultPanel);
                pView.setVisible();
            }
        }
    }//GEN-LAST:event_jTResultsMouseClicked
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jBSAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSAllActionPerformed
        List<Protein> prots = new ArrayList<>();
        for (Map.Entry<String, List<Protein>> map : mSFactory.getProteinList()) {
            if (map.getValue() != null && !map.getValue().isEmpty()) {
                prots.addAll(map.getValue());
            }
        }
        if (!prots.isEmpty()) {
            int size = prots.size();
            SavedResults.getInstance().addResult(prots);
            if (SavedResults.getInstance().getResult() != null) {
                Set<String> key = SavedResults.getInstance().getResult().keySet();
                for (String a : key) {
                    if (!ResultPanelFactory.getInstance().getResultPanel().getNodes().contains(a)) {
                        if (size > 1) {
                            ResultPanelFactory.getInstance().getResultPanel().addObject(a);
                        } else {
                            ResultPanelFactory.getInstance().getResultPanel().addObject(null, a, true);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jBSAllActionPerformed
    
    private void jBShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBShowAllActionPerformed
        List<Protein> prots = new ArrayList<>();
        for (Map.Entry<String, List<Protein>> map : mSFactory.getProteinList()) {
            if (map.getValue() != null && !map.getValue().isEmpty()) {
                prots.addAll(map.getValue());
            }
        }
        if (!prots.isEmpty()) {
            ProteinListView pView = new ProteinListView(prots, jTResultPanel);
            pView.setVisible();
        }
    }//GEN-LAST:event_jBShowAllActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBOpen;
    private javax.swing.JButton jBProcess;
    private javax.swing.JButton jBSAll;
    private javax.swing.JButton jBShowAll;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jCType;
    private javax.swing.JLabel jLFile;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTResultPanel;
    private javax.swing.JTable jTResults;
    // End of variables declaration//GEN-END:variables
}

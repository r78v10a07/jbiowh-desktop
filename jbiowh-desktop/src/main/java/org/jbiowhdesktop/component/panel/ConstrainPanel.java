package org.jbiowhdesktop.component.panel;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import javax.swing.DefaultCellEditor;
import javax.swing.JComponent;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import org.jbiowhcore.utility.constrains.JPLConstrains;
import org.jbiowhdesktop.actions.tabbedpanel.TabbedPanelCloseActionListener;
import org.jbiowhdesktop.component.panel.tabbedpanel.ClosePanel;
import org.jbiowhdesktop.component.popup.PopupConstrainPanel;
import org.jbiowhdesktop.component.table.model.ConstrainsTableModel;
import org.jbiowhdesktop.component.table.model.ExtendedListTableModel;

/**
 * This JPanel is
 *
 * $Author: r78v10a07@gmail.com $ $LastChangedDate: 2012-10-08 15:29:16 +0200
 * (Mon, 08 Oct 2012) $ $LastChangedRevision: 396 $
 *
 * @since Feb 28, 2012
 */
public class ConstrainPanel extends BasicConstrain {

    /**
     * Creates new form ConstrainPanel
     *
     * @param parentComponent
     */
    public ConstrainPanel(JComponent parentComponent) {
        this.parentComponent = parentComponent;
        uniqueKey = UUID.randomUUID();
        constrains = new JPLConstrains();
        initComponents();
    }

    /**
     * Creates new form ConstrainPanel
     *
     * @param constrains
     * @param parentComponent
     */
    public ConstrainPanel(JPLConstrains constrains, JComponent parentComponent) {
        this.parentComponent = parentComponent;
        uniqueKey = UUID.randomUUID();
        this.constrains = constrains;
        initComponents();
    }

    public UUID getUniqueKey() {
        return uniqueKey;
    }

    private void addJPLConstrain(JPLConstrains constrains) {

        for (Object data : constrains.getConstrains()) {
            String type = "Constrain";
            int size = 1;

            if (data instanceof Collection) {
                if (((Collection) data).isEmpty()) {
                    return;
                }
                type = ((Collection) data).iterator().next().getClass().getName();
                type = type.substring(type.lastIndexOf(".") + 1);
                size = ((Collection) data).size();
            }
            ExtendedListTableModel model = (ExtendedListTableModel) jTConstrains.getModel();

            List list = new ArrayList();
            List l = new ArrayList();
            if (size == 1) {
                l.add(type);
            } else if (size > 1) {
                l.add("Multiples " + type);
            }

            l.add(data);
            list.add(l);
            list.add("IN");
            list.add("AND");

            model.addRow(list);
        }
    }

    public void setVisible() {
        if (parentComponent instanceof JTabbedPane) {
            ((JTabbedPane) parentComponent).addTab("Constrain", this);
            ((JTabbedPane) parentComponent).setTabComponentAt(((JTabbedPane) parentComponent).getTabCount() - 1,
                    new ClosePanel((JTabbedPane) parentComponent,
                            "Constrain", uniqueKey, new TabbedPanelCloseActionListener(parentComponent)));
            ((JTabbedPane) parentComponent).setSelectedIndex(((JTabbedPane) parentComponent).getTabCount() - 1);
        }
    }

    public JPLConstrains getConstrains() {
        ConstrainsTableModel model = (ConstrainsTableModel) jTConstrain.getModel();
        if (model.getRowCount() != 0) {
            return model.getConstrains();
        }

        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jCExternalOperation = new javax.swing.JComboBox();
        jCConstOperation = new javax.swing.JComboBox();
        jTConstrain =         new javax.swing.JTable() {

            @Override
            public String getToolTipText(java.awt.event.MouseEvent e) {
                String tip = null;
                java.awt.Point p = e.getPoint();
                int rowIndex = rowAtPoint(p);
                int colIndex = columnAtPoint(p);
                int realColumnIndex = convertColumnIndexToModel(colIndex);

                if (realColumnIndex >= 0) {
                    TableModel model = getModel();

                    Object tipTemp = model.getValueAt(rowIndex, colIndex);
                    if (tipTemp != null) {
                        if (tipTemp instanceof String) {
                            tip = (String) tipTemp;
                        } else {
                            tip = tipTemp.toString();
                        }
                    }

                } else {
                    tip = super.getToolTipText(e);
                }
                return tip;
            }
        };

        jCConstOperation.addItem("IN");
        jCConstOperation.addItem("NOT IN");

        jCExternalOperation.addItem("AND");
        jCExternalOperation.addItem("OR");
        jTConstrain.setModel(new org.jbiowhdesktop.component.table.model.ConstrainsTableModel(constrains, 
            new String[] {"ConstrainsType", "Operation", "External Operation"},
            new Class[]{java.lang.Object.class, java.lang.Object.class, java.lang.Object.class},
            new boolean[]{false, true, true}));
    jTConstrain.setFillsViewportHeight(true);
    jTConstrain.setGridColor(new java.awt.Color(240, 240, 240));
    TableColumn operationColumn = jTConstrain.getColumnModel().getColumn(1);
    operationColumn.setCellEditor(new DefaultCellEditor(jCConstOperation));
    DefaultTableCellRenderer rendererConstrain = new DefaultTableCellRenderer();
    rendererConstrain.setToolTipText("Click for combo box");
    operationColumn.setCellRenderer(rendererConstrain);

    TableColumn logIntOperatorColumn = jTConstrain.getColumnModel().getColumn(2);
    logIntOperatorColumn.setCellEditor(new DefaultCellEditor(jCExternalOperation));
    logIntOperatorColumn.setCellRenderer(rendererConstrain);
    jTConstrains = jTConstrain;
    jTConstrain.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            jTConstrainMouseReleased(evt);
        }
        public void mousePressed(java.awt.event.MouseEvent evt) {
            jTConstrainMousePressed(evt);
        }
    });
    jScrollPane1.setViewportView(jTConstrain);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 836, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 600, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void jTConstrainMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTConstrainMousePressed
        showPopop(evt);
    }//GEN-LAST:event_jTConstrainMousePressed

    private void jTConstrainMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTConstrainMouseReleased
        showPopop(evt);
    }//GEN-LAST:event_jTConstrainMouseReleased

    private void showPopop(java.awt.event.MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            PopupConstrainPanel popupConstain = new PopupConstrainPanel(parentComponent);
            popupConstain.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTConstrain;
    // End of variables declaration//GEN-END:variables
    private JComponent parentComponent;
    private javax.swing.JComboBox jCExternalOperation;
    private javax.swing.JComboBox jCConstOperation;
    private UUID uniqueKey;
    private JPLConstrains constrains;
}
